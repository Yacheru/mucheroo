const { SlashCommandBuilder } = require('discord.js');
const { TempRooms, VoiceActivity, VoiceState } = require('../../../database/models/mucherooDB');
const { boostRoomControl } = require('../../../components/boostSystem/boostCommand');

const embedHandler = require('../../../components/voiceRooms/embeds');

module.exports = {
    deferred: false,
    data: new SlashCommandBuilder()
        .setName('room')
        .setDescription('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞—à–µ–π –∫–æ–º–Ω–∞—Ç—ã')
        .addSubcommand((subcommand) =>
            subcommand
                .setName('access')
                .setDescription('–ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–ª–∏ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –≤—Ö–æ–¥ –≤ –≤–∞—à—É –∫–æ–º–Ω–∞—Ç—É')
                .addUserOption((option) =>
                    option
                        .setName('member')
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        .setRequired(true))
                .addStringOption((option) =>
                    option
                        .setName('action')
                        .setDescription('–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
                        .addChoices(
                            { name: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å', value: 'false' },
                            { name: '–û—Ç–∫—Ä—ã—Ç—å', value: 'true' },
                        )
                        .setRequired(true)))
        .addSubcommand((subcommand) =>
            subcommand
                .setName('owner')
                .setDescription('–ü–µ—Ä–µ–¥–∞—Ç—å –≤–ª–∞–¥–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
                .addUserOption((option) =>
                    option
                        .setName('member')
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        .setRequired(true)))
        .addSubcommand((subcommand) =>
            subcommand
                .setName('boost')
                .setDescription('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–æ–π')
                .addUserOption((option) =>
                    option
                        .setName('member')
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        .setRequired(true))
                .addStringOption((option) =>
                    option
                        .setName('action')
                        .setDescription('–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
                        .addChoices(
                            { name: '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å', value: 'false' },
                            { name: '–û—Ç–∫—Ä—ã—Ç—å', value: 'true' },
                        )
                        .setRequired(true)))
        .addSubcommand((subcommand) =>
            subcommand
                .setName('spent')
                .setDescription('–í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–Ω–∞—Ç–∞—Ö')
                .addUserOption((option) =>
                    option
                        .setName('member')
                        .setDescription('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                        .setRequired(false)))
        .setDMPermission(false),
    async execute(interaction) {
        const command = interaction.options.getSubcommand();
        const member = await interaction.options.getMember('member') ? await interaction.options.getMember('member') : interaction.member;

        if (command === 'spent') {
            const voiceState = await VoiceState.findOne({ where: { userID: member.id } });
            const voiceActivity = await VoiceActivity.findOne({ where: { userID: member.id } });

            if (!voiceState || !voiceActivity) {
                return await interaction.reply({ content: `–ü–æ—Ö–æ–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ **${member.displayName}** –µ—â—ë –Ω–µ –±—ã–ª –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–Ω–∞—Ç–µ...üò•`, ephemeral: true });
            }

            return await interaction.reply({ embeds: [embedHandler.voiceTimeSpent(voiceState, voiceActivity, member)], ephemeral: true });
        }

        if (command === 'boost') {
            return await boostRoomControl(interaction);
        }

        if (!member || member.user.bot || member.id === interaction.member.id) {
            return interaction.reply({ embeds: [embedHandler.notCorrectUser()], ephemeral: true });
        }

        if (!interaction.member.voice.channel && command !== 'boost') {
            return interaction.reply({ embeds: [embedHandler.notInVoice()], ephemeral: true });
        }

        const tempRoomRow = await TempRooms.findOne({ where: { userID: interaction.member.id } });
        if (!tempRoomRow && command !== 'boost') {
            return interaction.reply({ embeds: [embedHandler.notOwner()], ephemeral: true });
        }

        switch (command) {
            case 'access':
                const action = interaction.options.getString('action') === 'true';
                const messageReply = action ? '–æ—Ç–∫—Ä—ã–ª–∏' : '–∑–∞–∫—Ä—ã–ª–∏';

                await interaction.member.voice.channel.permissionOverwrites.edit(member, { Connect: action });
                return interaction.reply({ embeds: [embedHandler.lockOrOpenRoom(messageReply, member.id)], ephemeral: true });
            case 'owner':
                await TempRooms.update({ userID: member.id }, { where: { userID: interaction.user.id } });
                return interaction.reply({ embeds: [embedHandler.transferRoom(member.id)], ephemeral: true });
        }
    },
};
